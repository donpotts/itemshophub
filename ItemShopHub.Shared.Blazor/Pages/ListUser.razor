@page "/user"
@inject AppService AppService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject IStorageService StorageService
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Users</PageTitle>

<div class="mb-3">
    <MudText Typo="Typo.h3">Users</MudText>
</div>

<MudStack AlignItems="AlignItems.End" Class="mb-3">
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
        <MudToggleIconButton ToggledChanged="OnToggleView" Toggled="_isCardView"
                           Icon="@Icons.Material.Filled.ViewModule" 
                           ToggledIcon="@Icons.Material.Filled.ViewList"
                           Size="Size.Medium" />
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircleOutline" Color="Color.Primary" OnClick="@(e => OnAdd())">Add</MudButton>
    </MudStack>
</MudStack>

@if (_isCardView)
{
    <!-- Card View -->
    <MudStack Class="mb-3">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6">Users</MudText>
            <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true" ValueChanged="@(value => SearchChanged(value))"></MudTextField>
        </MudStack>
    </MudStack>
    
    @if (_cardData != null && _cardData.Items.Any())
    {
        <MudGrid>
            @foreach (var user in _cardData.Items)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Style="height: 350px; display: flex; flex-direction: column;">
                        @if (!string.IsNullOrEmpty(user.Photo))
                        {
                            <MudCardMedia Image="@GetAbsoluteUri(user.Photo)" Height="120" Style="object-fit: cover;" />
                        }
                        else
                        {
                            <div style="height: 120px; display: flex; align-items: center; justify-content: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                                <MudAvatar Color="Color.Surface" Size="Size.Large" Style="font-size: 2rem; width: 60px; height: 60px;">
                                    @(string.IsNullOrEmpty(user.FirstName) ? "U" : user.FirstName[0].ToString())
                                </MudAvatar>
                            </div>
                        }
                        <MudCardContent Style="flex: 1; display: flex; flex-direction: column;">
                            <MudStack Spacing="1" Class="mb-2">
                                <MudText Typo="Typo.h6">@($"{user.FirstName} {user.LastName}".Trim())</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">@user.Email</MudText>
                            </MudStack>
                            @if (!string.IsNullOrEmpty(user.Title))
                            {
                                <MudText Typo="Typo.body2" Color="Color.Primary" Class="mb-1">@user.Title</MudText>
                            }
                            @if (!string.IsNullOrEmpty(user.CompanyName))
                            {
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">@user.CompanyName</MudText>
                            }
                            @if (!string.IsNullOrEmpty(user.PhoneNumber))
                            {
                                <MudText Typo="Typo.body2" Color="Color.Tertiary" Style="margin-top: auto;">
                                    <MudIcon Icon="@Icons.Material.Filled.Phone" Size="Size.Small" /> @user.PhoneNumber
                                </MudText>
                            }
                        </MudCardContent>
                        <MudCardActions>
                            <MudIconButton Icon="@Icons.Material.Outlined.Badge" Size="@Size.Small" title="Roles" OnClick="@(e => OnModifyRoles(user))" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" title="Edit" OnClick="@(e => OnEdit(user))" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" title="Delete" OnClick="@(e => OnDelete(user))" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
        
        <!-- Card View Pagination -->
        <MudStack Row="true" Justify="Justify.Center" Class="mt-4">
            <MudPagination Count="@_totalPages" SelectedChanged="OnPageChanged" Selected="_currentPage" ShowFirstButton="true" ShowLastButton="true" />
        </MudStack>
    }
    else
    {
        <MudText Typo="Typo.body1" Align="Align.Center" Class="mt-4">No users found</MudText>
    }
}
else
{
    <!-- Grid View -->
    <MudDataGrid T="ApplicationUserDto" @ref="grid" ServerData="(new Func<GridState<ApplicationUserDto>, Task<GridData<ApplicationUserDto>>>(ServerReload))" Filterable="true">
    <Columns>
        <PropertyColumn Property="x => x!.Id" Title="Id" />
        <PropertyColumn Property="x => x!.Email" />
        <PropertyColumn Property="x => x!.PhoneNumber" Title="Phone Number" />
        <PropertyColumn Property="x => x!.FirstName" Title="First Name" />
        <PropertyColumn Property="x => x!.LastName" Title="Last Name" />
        <PropertyColumn Property="x => x!.Title" />
        <PropertyColumn Property="x => x!.CompanyName" Title="Company Name" />
        <TemplateColumn Title="Photo" Sortable="false" Filterable="false">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item!.Photo))
                {
                    <MudImage Src="@GetAbsoluteUri(context.Item!.Photo)" Style="width:128px;height:128px;object-fit:contain;" />
                }
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn StickyRight="true" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudStack Row="true">
                    <MudIconButton Icon="@Icons.Material.Outlined.Badge" Size="@Size.Small" title="Roles" OnClick="@(e => OnModifyRoles(context.Item!))"  />
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" title="Edit" OnClick="@(e => OnEdit(context.Item!))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" title="Delete" OnClick="@(e => OnDelete(context.Item!))" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ApplicationUserDto" />
    </PagerContent>
</MudDataGrid>
}

@code {
    private MudDataGrid<ApplicationUserDto>? grid;
    private string? _searchString;
    private bool _isCardView = false;
    private GridData<ApplicationUserDto>? _cardData;
    private int _currentPage = 1;
    private int _pageSize = 12;
    private int _totalPages = 1;

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    private async Task<GridData<ApplicationUserDto>> ServerReload(GridState<ApplicationUserDto> state)
    {
        var top = state.PageSize;
        var skip = state.Page * state.PageSize;
        var orderby = ODataHelpers.GetOrderBy(state.SortDefinitions);
        var filter = ODataHelpers.GetFilter(state.FilterDefinitions);

        AppService.ODataResult<ApplicationUserDto>? result = null;

        try
        {
            result = await AppService.ListUserODataAsync(top, skip, orderby, filter, true);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return new() { TotalItems = result?.Count ?? 0, Items = result?.Value ?? Enumerable.Empty<ApplicationUserDto>() };
    }

    private async void OnAdd()
    {
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };
        var dialogRef = await DialogService.ShowAsync<AddUser>("Add User", dialogOptions);
        var result = await dialogRef.Result;
        if (result != null && !result.Canceled)
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
    }

    private async void OnModifyRoles(ApplicationUserDto record)
    {
        DialogParameters<ModifyRoles> dialogParams = new() { { x => x.Id, record.Id } };
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };
        await (await DialogService.ShowAsync<ModifyRoles>("Modify Roles", dialogParams, dialogOptions)).Result;
    }

    private async void OnEdit(ApplicationUserDto record)
    {
        DialogParameters<UpdateUser> dialogParams = new() { { x => x.Id, record.Id } };
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };
        var dialogRef = await DialogService.ShowAsync<UpdateUser>("Update User", dialogParams, dialogOptions);
        var result = await dialogRef.Result;
        if (result != null && !result.Canceled)
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
    }

    private async void OnDelete(ApplicationUserDto record)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to delete this record?",
            "Delete",
            "Cancel");

        if (result.GetValueOrDefault(false))
        {
            try
            {
                await AppService.DeleteUserAsync(record.Id!);
                await (grid?.ReloadServerData() ?? Task.CompletedTask);
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    private void SearchChanged(string Value)
    {
        if (Value.EndsWith("."))
        {
            return;
        }
        _searchString = Value.ToString().ToLower();
        
        if (_isCardView)
        {
            _currentPage = 1;
            _ = LoadCardData();
        }
        else
        {
            grid?.ReloadServerData();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Load view preference from localStorage
        var savedViewPreference = await StorageService.GetAsync<bool?>("user-view-preference");
        if (savedViewPreference.HasValue)
        {
            _isCardView = savedViewPreference.Value;
        }
        
        if (_isCardView)
        {
            await LoadCardData();
        }
    }

    private async Task LoadCardData()
    {
        var skip = (_currentPage - 1) * _pageSize;
        var orderby = "FirstName asc";
        var filter = "";

        if (_searchString?.Length > 0)
        {
           filter = $"contains(tolower(Email), '{_searchString}') or contains(tolower(FirstName), '{_searchString}') or contains(tolower(LastName), '{_searchString}') or contains(tolower(Title), '{_searchString}') or contains(tolower(CompanyName), '{_searchString}') or contains(tolower(PhoneNumber), '{_searchString}') ";
        }

        try
        {
            var result = await AppService.ListUserODataAsync(_pageSize, skip, orderby, filter, true);
            _cardData = new() { TotalItems = result?.Count ?? 0, Items = result?.Value ?? Enumerable.Empty<ApplicationUserDto>() };
            _totalPages = (int)Math.Ceiling((double)_cardData.TotalItems / _pageSize);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task OnPageChanged(int page)
    {
        _currentPage = page;
        await LoadCardData();
    }

    private async Task OnToggleView(bool isCardView)
    {
        _isCardView = isCardView;
        
        // Save view preference to localStorage
        await StorageService.SetAsync("user-view-preference", _isCardView);
        
        if (_isCardView)
        {
            _currentPage = 1;
            await LoadCardData();
        }
        StateHasChanged();
    }
}
