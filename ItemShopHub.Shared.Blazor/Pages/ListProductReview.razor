@page "/productreview"
@inject AppService AppService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IStorageService StorageService
@attribute [Authorize]
@using CsvHelper
@using System.Globalization
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using System.Web

<PageTitle>Product Reviews</PageTitle>

<div class="mb-3">
    <MudText Typo="Typo.h3">Product Reviews</MudText>
    @if (_productIdFilter.HasValue)
    {
        <MudAlert Severity="Severity.Info" Class="mt-2">
            Showing reviews for Product ID: @_productIdFilter.Value
            <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="ClearProductFilter" Class="ml-2">
                Show All Reviews
            </MudButton>
        </MudAlert>
    }
</div>

<MudStack AlignItems="AlignItems.End" Class="mb-3">
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
        <MudToggleIconButton ToggledChanged="OnToggleView" Toggled="_isCardView"
                           Icon="@Icons.Material.Filled.ViewModule" 
                           ToggledIcon="@Icons.Material.Filled.ViewList"
                           Size="Size.Medium" />
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircleOutline" Color="Color.Primary" OnClick="@(e => OnAdd())">Add</MudButton>
    </MudStack>
</MudStack>

@if (_isCardView)
{
    <!-- Card View -->
    <MudStack Class="mb-3">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6">Product Reviews</MudText>
            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true" ValueChanged="@(value => SearchChanged(value))"></MudTextField>
                <MudButton Color="Color.Primary" OnClick="ExportAllToCSV">Export CSV</MudButton>
                <MudFileUpload T="IBrowserFile" Accept=".csv" FilesChanged="ImportFromCSV" MaximumFileCount="1">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Upload">
                            Import CSV
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
                @if (_isImporting)
                {
                    <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
                }
            </MudStack>
        </MudStack>
    </MudStack>
    
    @if (_cardData != null && _cardData.Items.Any())
    {
        <MudGrid>
            @foreach (var review in _cardData.Items)
            {
                <MudItem xs="12" sm="6" md="4" lg="4">
                    <MudCard Style="height: 350px; display: flex; flex-direction: column;">
                        <MudCardContent Style="flex: 1; display: flex; flex-direction: column;">
                            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-2">
                                <MudText Typo="Typo.h6">@review.CustomerName</MudText>
                                @if (review.IsVerifiedPurchase == true)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Success" Text="Verified" Icon="@Icons.Material.Filled.Verified" />
                                }
                            </MudStack>
                            @if (review.Rating.HasValue)
                            {
                                <StarRating Value="@((decimal?)review.Rating.Value)" ReadOnly="true" Size="Size.Small" ShowRatingText="true" AverageRating="@((decimal?)review.Rating.Value)" />
                            }
                            @if (!string.IsNullOrEmpty(review.Title))
                            {
                                <MudText Typo="Typo.subtitle1" Class="mt-2">@review.Title</MudText>
                            }
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Style="flex: 1; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 4; -webkit-box-orient: vertical;" Class="mt-1">@review.ReviewText</MudText>
                            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Style="margin-top: 8px;">
                                <MudText Typo="Typo.caption" Color="Color.Tertiary">
                                    Product ID: @review.ProductId
                                </MudText>
                                @if (review.HelpfulVotes > 0)
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Info">
                                        @review.HelpfulVotes helpful
                                    </MudText>
                                }
                            </MudStack>
                        </MudCardContent>
                        @if (!string.IsNullOrEmpty(review.Response))
                        {
                            <MudDivider Class="my-2" />
                            <MudStack Class="pa-3" Style="background-color: var(--mud-palette-info-lighten);">
                                <MudText Typo="Typo.subtitle2" Style="display: flex; align-items: center;">
                                    <MudIcon Icon="@Icons.Material.Filled.Reply" Class="mr-2" Size="Size.Small" />
                                    Business Response
                                </MudText>
                                <MudText Typo="Typo.body2">@review.Response</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    @review.ResponseDate?.ToString("MMM dd, yyyy")
                                </MudText>
                            </MudStack>
                        }
                        <MudCardActions>
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" title="Edit" OnClick="@(e => OnEdit(review))" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" title="Delete" OnClick="@(e => OnDelete(review))" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Reply" Size="@Size.Small" title="@(string.IsNullOrEmpty(review.Response) ? "Add Response" : "Edit Response")" OnClick="@(e => OnRespondToReview(review))" Color="@(string.IsNullOrEmpty(review.Response) ? Color.Primary : Color.Secondary)" />
                            <MudSpacer />
                            <MudText Typo="Typo.caption" Color="Color.Tertiary">
                                @review.ReviewDate?.ToString("MMM dd, yyyy")
                            </MudText>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
        
        <!-- Card View Pagination -->
        <MudStack Row="true" Justify="Justify.Center" Class="mt-4">
            <MudPagination Count="@_totalPages" SelectedChanged="OnPageChanged" Selected="@_currentPage" ShowFirstButton="true" ShowLastButton="true" />
        </MudStack>
    }
    else
    {
        <MudText Typo="Typo.body1" Align="Align.Center" Class="mt-4">No product reviews found</MudText>
    }
}
else
{
    <!-- Grid View -->
    <MudDataGrid T="ProductReview" @ref="grid" ServerData="(new Func<GridState<ProductReview>, Task<GridData<ProductReview>>>(ServerReload))" Filterable="true">
    <ToolBarContent>
         <MudText Typo="Typo.h6">Product Reviews</MudText>
         <MudSpacer />
         <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true" ValueChanged="@(value => SearchChanged(value))"></MudTextField>
         <MudButton Color="Color.Primary" OnClick="ExportAllToCSV">Export CSV</MudButton>
         <MudFileUpload T="IBrowserFile" Accept=".csv" FilesChanged="ImportFromCSV" MaximumFileCount="1">
             <ActivatorContent>
                 <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Upload">
                     Import CSV
                 </MudButton>
             </ActivatorContent>
         </MudFileUpload>
         @if (_isImporting)
         {
             <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
         }
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x!.Id" Title="Id" />
        <PropertyColumn Property="x => x!.ProductId" Title="ProductId" />
        <PropertyColumn Property="x => x!.CustomerName" Title="CustomerName" />
        <PropertyColumn Property="x => x!.CustomerEmail" Title="CustomerEmail" />
        <PropertyColumn Property="x => x!.Rating" Title="Rating" />
        <PropertyColumn Property="x => x!.Title" Title="Title" />
        <PropertyColumn Property="x => x!.ReviewText" Title="ReviewText" />
        <PropertyColumn Property="x => x!.ReviewDate" Title="ReviewDate" />
        <PropertyColumn Property="x => x!.IsVerifiedPurchase" Title="IsVerifiedPurchase" />
        <PropertyColumn Property="x => x!.HelpfulVotes" Title="HelpfulVotes" />
        <PropertyColumn Property="x => x!.CreatedDate" Title="CreatedDate" />
        <PropertyColumn Property="x => x!.ModifiedDate" Title="ModifiedDate" />
        <PropertyColumn Property="x => x!.Notes" Title="Notes" />
        <PropertyColumn Property="x => x!.UserId" Title="UserId" />
        <TemplateColumn Title="Response" Sortable="false">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item?.Response))
                {
                    <MudStack>
                        <MudText Typo="Typo.body2" Style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                            @context.Item.Response
                        </MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                            @context.Item.ResponseDate?.ToString("MMM dd")
                        </MudText>
                    </MudStack>
                }
                else
                {
                    <MudText Typo="Typo.caption" Color="Color.Tertiary">No response</MudText>
                }
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Style="width: 80px;" StickyRight="true" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudStack Row="true">
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" title="Edit" OnClick="@(e => OnEdit(context.Item!))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" title="Delete" OnClick="@(e => OnDelete(context.Item!))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Reply" Size="@Size.Small" title="@(string.IsNullOrEmpty(context.Item?.Response) ? "Add Response" : "Edit Response")" OnClick="@(e => OnRespondToReview(context.Item!))" Color="@(string.IsNullOrEmpty(context.Item?.Response) ? Color.Primary : Color.Secondary)" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ProductReview" />
    </PagerContent>
</MudDataGrid>
}

<script>
    window.downloadFromBase64 = function (base64, filename) {
        var a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        var byteCharacters = atob(base64);
        var byteNumbers = new Array(byteCharacters.length);
        for (var i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        var byteArray = new Uint8Array(byteNumbers);
        var blob = new Blob([byteArray], { type: "application/octet-stream" });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = filename;
        a.click();
        window.URL.revokeObjectURL(url);
    };
</script>

@code {
    private MudDataGrid<ProductReview>? grid;
    private string? _searchString;
    private bool _isImporting = false;
    private IBrowserFile? _csvFile;
    private long? _productIdFilter;
    private bool _isCardView = false;
    private GridData<ProductReview>? _cardData;
    private int _currentPage = 1;
    private int _pageSize = 12;
    private int _totalPages = 1;
    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
            return uri;
        var baseUri = HttpClient.BaseAddress ?? throw new Exception("Unable to determine base address");
        return new Uri(baseUri, uri).ToString();
    }

    private async Task<GridData<ProductReview>> ServerReload(GridState<ProductReview> state)
    {
        var top = state.PageSize;
        var skip = state.Page * state.PageSize;
        var orderby = ODataHelpers.GetOrderBy(state.SortDefinitions);
        var filter = ODataHelpers.GetFilter(state.FilterDefinitions);

        AppService.ODataResult<ProductReview>? result = null;

        try
        {
            var filters = new List<string>();
            if (_productIdFilter.HasValue)
                filters.Add($"ProductId eq {_productIdFilter.Value}");
            if (_searchString?.Length > 0)
            {
                bool isNumeric = double.TryParse(_searchString, out _);
                bool isDateTime = DateTime.TryParse(_searchString, out _);
                if (isNumeric)
                    filters.Add($"Id eq {_searchString} or ProductId eq {_searchString} or Rating eq {_searchString} or HelpfulVotes eq {_searchString} or UserId eq {_searchString}");
                else if (isDateTime)
                    filters.Add($"ReviewDate ge cast({_searchString},Edm.DateTimeOffset) or CreatedDate ge cast({_searchString},Edm.DateTimeOffset) or ModifiedDate ge cast({_searchString},Edm.DateTimeOffset)");
                else
                    filters.Add($"contains(tolower(CustomerName), '{_searchString}') or contains(tolower(CustomerEmail), '{_searchString}') or contains(tolower(Title), '{_searchString}') or contains(tolower(ReviewText), '{_searchString}') or contains(tolower(Notes), '{_searchString}') ");
            }
            if (!string.IsNullOrWhiteSpace(filter))
                filters.Add(filter);
            var combinedFilter = filters.Any() ? string.Join(" and ", filters.Select(f => $"({f})")) : null;
            result = await AppService.ListProductReviewODataAsync(top, skip, orderby, combinedFilter, true, null);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return new() { TotalItems = result?.Count ?? 0, Items = result?.Value ?? Enumerable.Empty<ProductReview>() };
    }

    private async void OnAdd()
    {
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };
        var dialogRef = await DialogService.ShowAsync<AddProductReview>("Add ProductReview", dialogOptions);
        var result = await dialogRef.Result;
        if (result != null && !result.Canceled)
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
    }

    private async void OnEdit(ProductReview record)
    {
        DialogParameters<UpdateProductReview> dialogParams = new() { { x => x.Id, record.Id!.Value } };
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };
        var dialogRef = await DialogService.ShowAsync<UpdateProductReview>("Update ProductReview", dialogParams, dialogOptions);
        var result = await dialogRef.Result;
        if (result != null && !result.Canceled)
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
    }

    private async void OnDelete(ProductReview record)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to delete this record?",
            "Delete",
            "Cancel");
        if (result.GetValueOrDefault(false))
        {
            try
            {
                await AppService.DeleteProductReviewAsync(record.Id!.Value);
                await (grid?.ReloadServerData() ?? Task.CompletedTask);
                if (_isCardView)
                    await LoadCardData();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    private async void OnRespondToReview(ProductReview record)
    {
        DialogParameters<ReviewResponseDialog> dialogParams = new() { { x => x.Review, record } };
        DialogOptions dialogOptions = new() { FullWidth = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };
        var dialogRef = await DialogService.ShowAsync<ReviewResponseDialog>("Respond to Review", dialogParams, dialogOptions);
        var result = await dialogRef.Result;
        if (result != null && !result.Canceled)
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
            if (_isCardView)
                await LoadCardData();
        }
    }
    
    private void SearchChanged(string Value)
    {
        if (Value.EndsWith('.'))
            return;
        _searchString = Value.ToLowerInvariant();
        if (_searchString.Length > 18)
        {
            if (DateTimeOffset.TryParse(_searchString, out var dt))
                _searchString = dt.ToString("yyyy-MM-ddTHH:mm:ssK");
        }
        if (_isCardView)
        {
            _currentPage = 1;
            _ = LoadCardData();
        }
        else
        {
            grid?.ReloadServerData();
        }
    }

    private async Task ExportAllToCSV()
    {
        AppService.ODataResult<ProductReview>? result = null;
        try
        {
            result = await AppService.ListProductReviewODataAsync(null, null, null, null, true, null);
            if (result?.Value is { } reviews)
            {
                var records = reviews.Select(x => new
                {
                    x.Id,
                    x.ProductId,
                    x.CustomerName,
                    x.CustomerEmail,
                    x.Rating,
                    x.Title,
                    x.ReviewText,
                    x.ReviewDate,
                    x.IsVerifiedPurchase,
                    x.HelpfulVotes,
                    x.CreatedDate,
                    x.ModifiedDate,
                    x.Notes,
                    x.UserId,
                });
                using var memoryStream = new MemoryStream();
                using (var writer = new StreamWriter(memoryStream))
                using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
                {
                    csv.WriteRecords(records);
                }
                var base64 = Convert.ToBase64String(memoryStream.ToArray());
                await JSRuntime.InvokeVoidAsync("downloadFromBase64", base64, "ProductReview_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".csv");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task ImportFromCSV(IBrowserFile file)
    {
        if (file == null) return;
        _csvFile = file;
        _isImporting = true;
        StateHasChanged();
        try
        {
            var fileContent = new byte[_csvFile.Size];
            using (var stream = _csvFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024))
            {
                await stream.ReadAsync(fileContent, 0, (int)_csvFile.Size);
            }
            using var memoryStream = new MemoryStream(fileContent);
            using var reader = new StreamReader(memoryStream);
            using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
            csv.Context.Configuration.HeaderValidated = null;
            csv.Context.Configuration.MissingFieldFound = null;
            var productReviews = new List<ProductReview>();
            await csv.ReadAsync();
            csv.ReadHeader();
            while (await csv.ReadAsync())
            {
                var productReview = new ProductReview
                {
                    CustomerName = GetFieldValue(csv, "customername") ?? GetFieldValue(csv, "CustomerName"),
                    CustomerEmail = GetFieldValue(csv, "customeremail") ?? GetFieldValue(csv, "CustomerEmail"),
                    Title = GetFieldValue(csv, "title") ?? GetFieldValue(csv, "Title"),
                    ReviewText = GetFieldValue(csv, "reviewtext") ?? GetFieldValue(csv, "ReviewText"),
                    Notes = GetFieldValue(csv, "notes") ?? GetFieldValue(csv, "Notes")
                };
                var productIdStr = GetFieldValue(csv, "productid") ?? GetFieldValue(csv, "ProductId");
                if (!string.IsNullOrWhiteSpace(productIdStr) && long.TryParse(productIdStr, out var productId)) productReview.ProductId = productId;
                var ratingStr = GetFieldValue(csv, "rating") ?? GetFieldValue(csv, "Rating");
                if (!string.IsNullOrWhiteSpace(ratingStr) && long.TryParse(ratingStr, out var rating)) productReview.Rating = rating;
                var verifiedStr = GetFieldValue(csv, "isverifiedpurchase") ?? GetFieldValue(csv, "IsVerifiedPurchase");
                if (!string.IsNullOrWhiteSpace(verifiedStr) && bool.TryParse(verifiedStr, out var isVerified)) productReview.IsVerifiedPurchase = isVerified;
                var helpfulVotesStr = GetFieldValue(csv, "helpfulvotes") ?? GetFieldValue(csv, "HelpfulVotes");
                if (!string.IsNullOrWhiteSpace(helpfulVotesStr) && long.TryParse(helpfulVotesStr, out var helpfulVotes)) productReview.HelpfulVotes = helpfulVotes;
                var reviewDateStr = GetFieldValue(csv, "reviewdate") ?? GetFieldValue(csv, "ReviewDate");
                if (!string.IsNullOrWhiteSpace(reviewDateStr) && DateTime.TryParse(reviewDateStr, out var reviewDate)) productReview.ReviewDate = reviewDate;
                var userIdStr = GetFieldValue(csv, "userid") ?? GetFieldValue(csv, "UserId");
                if (!string.IsNullOrWhiteSpace(userIdStr) && long.TryParse(userIdStr, out var userId)) productReview.UserId = userId;
                productReviews.Add(productReview);
            }
            if (productReviews.Any())
            {
                var response = await AppService.BulkUpsertProductReviewAsync(productReviews);
                if (response != null)
                {
                    var jsonElement = (JsonElement)response;
                    var success = jsonElement.GetProperty("success").GetBoolean();
                    var processedCount = jsonElement.GetProperty("processedCount").GetInt32();
                    var addedCount = jsonElement.GetProperty("addedCount").GetInt32();
                    var updatedCount = jsonElement.GetProperty("updatedCount").GetInt32();
                    if (success)
                    {
                        Snackbar.Add($"Import successful: {processedCount} processed, {addedCount} added, {updatedCount} updated", Severity.Success);
                        await (grid?.ReloadServerData() ?? Task.CompletedTask);
                    }
                    else
                    {
                        Snackbar.Add("Import failed", Severity.Error);
                    }
                }
            }
            else
            {
                Snackbar.Add("No valid product reviews found in CSV", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error importing CSV: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isImporting = false;
            StateHasChanged();
        }
    }

    private string? GetFieldValue(CsvReader csv, string fieldName)
    {
        try { return csv.GetField(fieldName); } catch { return null; }
    }

    private async void ClearProductFilter()
    {
        _productIdFilter = null;
        Navigation.NavigateTo("/productreview");
        if (_isCardView)
        {
            _currentPage = 1;
            await LoadCardData();
        }
        else
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var queryParams = HttpUtility.ParseQueryString(uri.Query);
        var productIdParam = queryParams["productId"];
        if (!string.IsNullOrEmpty(productIdParam) && long.TryParse(productIdParam, out var productId))
            _productIdFilter = productId;
        var savedViewPreference = await StorageService.GetAsync<bool?>("productreview-view-preference");
        if (savedViewPreference.HasValue)
            _isCardView = savedViewPreference.Value;
        if (_isCardView)
            await LoadCardData();
    }

    private async Task LoadCardData()
    {
        var skip = (_currentPage - 1) * _pageSize;
        var orderby = "CreatedDate desc";
        var filters = new List<string>();
        if (_productIdFilter.HasValue) filters.Add($"ProductId eq {_productIdFilter.Value}");
        if (_searchString?.Length > 0)
        {
            bool isNumeric = double.TryParse(_searchString, out _);
            bool isDateTime = DateTime.TryParse(_searchString, out _);
            if (isNumeric)
                filters.Add($"Id eq {_searchString} or ProductId eq {_searchString} or Rating eq {_searchString} or HelpfulVotes eq {_searchString} or UserId eq {_searchString}");
            else if (isDateTime)
                filters.Add($"ReviewDate ge cast({_searchString},Edm.DateTimeOffset) or CreatedDate ge cast({_searchString},Edm.DateTimeOffset) or ModifiedDate ge cast({_searchString},Edm.DateTimeOffset)");
            else
                filters.Add($"contains(tolower(CustomerName), '{_searchString}') or contains(tolower(CustomerEmail), '{_searchString}') or contains(tolower(Title), '{_searchString}') or contains(tolower(ReviewText), '{_searchString}') or contains(tolower(Notes), '{_searchString}') ");
        }
        var combinedFilter = filters.Any() ? string.Join(" and ", filters.Select(f => $"({f})")) : null;
        try
        {
            var result = await AppService.ListProductReviewODataAsync(_pageSize, skip, orderby, combinedFilter, true, null);
            _cardData = new() { TotalItems = result?.Count ?? 0, Items = result?.Value ?? Enumerable.Empty<ProductReview>() };
            _totalPages = (int)Math.Ceiling(_cardData.TotalItems / (double)_pageSize);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task OnPageChanged(int page)
    {
        _currentPage = page;
        await LoadCardData();
    }

    private async Task OnToggleView(bool isCardView)
    {
        _isCardView = isCardView;
        await StorageService.SetAsync("productreview-view-preference", _isCardView);
        if (_isCardView)
        {
            _currentPage = 1;
            await LoadCardData();
        }
        StateHasChanged();
    }
}
