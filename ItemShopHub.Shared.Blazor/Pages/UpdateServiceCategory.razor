@page "/service-categories/edit/{CategoryId:long}"
@using ItemShopHub.Shared.Models
@using ItemShopHub.Shared.Blazor.Services
@using System.ComponentModel.DataAnnotations
@inject AppService AppService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<PageTitle>Edit Service Category</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudStack Spacing="4">
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" 
                          OnClick="GoBack" 
                          Color="Color.Default" />
            <MudText Typo="Typo.h4">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" />
                Edit Category: @(category?.Name ?? "Loading...")
            </MudText>
        </MudStack>

        @if (category == null)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else
        {
            <MudPaper Class="pa-6" Elevation="2">
                <EditForm Model="@category" OnValidSubmit="@UpdateCategory">
                    <DataAnnotationsValidator />
                    <MudGrid Spacing="3">
                        <!-- Basic Information -->
                        <MudItem xs="12">
                            <MudText Typo="Typo.h6" Class="mb-3">Category Information</MudText>
                        </MudItem>
                        
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="category.Name" 
                                        Label="Category Name" 
                                        Required="true"
                                        Variant="Variant.Outlined" />
                            <ValidationMessage For="@(() => category.Name)" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudNumericField @bind-Value="category.SortOrder" 
                                           Label="Sort Order" 
                                           Variant="Variant.Outlined"
                                           Min="0" 
                                           T="int?" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField @bind-Value="category.Description" 
                                        Label="Description" 
                                        Lines="3"
                                        Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="category.IconClass" 
                                        Label="Icon Class" 
                                        HelperText="CSS icon class (e.g., 'fas fa-build', 'fas fa-computer')"
                                        Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="category.ColorCode" 
                                        Label="Color Code" 
                                        HelperText="Hex color code (e.g., '#2196F3')"
                                        Variant="Variant.Outlined" />
                        </MudItem>

                        <!-- Status -->
                        <MudItem xs="12">
                            <MudText Typo="Typo.h6" Class="mb-3 mt-4">Status</MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudSwitch @bind-Value="category.IsActive" 
                                     Label="Active" 
                                     Color="Color.Primary" />
                        </MudItem>

                        <!-- Metadata -->
                        <MudItem xs="12">
                            <MudText Typo="Typo.h6" Class="mb-3 mt-4">Metadata</MudText>
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField Value="@category.CreatedDate?.ToString("yyyy-MM-dd HH:mm")" 
                                        Label="Created Date" 
                                        ReadOnly="true"
                                        Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField Value="@category.ModifiedDate?.ToString("yyyy-MM-dd HH:mm")" 
                                        Label="Modified Date" 
                                        ReadOnly="true"
                                        Variant="Variant.Outlined" />
                        </MudItem>

                        <!-- Actions -->
                        <MudItem xs="12" Class="d-flex justify-end gap-2 mt-4">
                            <MudButton Variant="Variant.Text" OnClick="GoBack">
                                Cancel
                            </MudButton>
                            <MudButton ButtonType="ButtonType.Submit" 
                                     Variant="Variant.Filled" 
                                     Color="Color.Primary"
                                     Disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                    <span class="ms-2">Updating...</span>
                                }
                                else
                                {
                                    <span>Update Category</span>
                                }
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudPaper>
        }
    </MudStack>
</MudContainer>

@code {
    [Parameter] public long CategoryId { get; set; }

    private ServiceCategory? category;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategory();
    }

    private async Task LoadCategory()
    {
        try
        {
            category = await AppService.GetServiceCategoryAsync(CategoryId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading category: {ex.Message}", Severity.Error);
            Navigation.NavigateTo("/service-categories");
        }
    }

    private async Task UpdateCategory()
    {
        if (category == null) return;

        isSubmitting = true;
        try
        {
            category.ModifiedDate = DateTime.UtcNow;
            await AppService.UpdateServiceCategoryAsync(category);
            Snackbar.Add("Service category updated successfully", Severity.Success);
            Navigation.NavigateTo("/service-categories");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating category: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/service-categories");
    }
}
