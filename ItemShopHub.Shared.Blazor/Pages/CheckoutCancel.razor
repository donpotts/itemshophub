@page "/checkout/cancel"
@using ItemShopHub.Shared.Blazor.Services
@using ItemShopHub.Shared.Models
@inject NavigationManager Navigation
@inject AppService AppService
@inject ISnackbar Snackbar

<PageTitle>Payment Cancelled</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Class="pa-8" Elevation="2">
        <MudStack AlignItems="AlignItems.Center" Spacing="4">
            <MudIcon Icon="@Icons.Material.Filled.Cancel" Size="Size.Large" Color="Color.Warning" />
            <MudText Typo="Typo.h5">Payment Cancelled</MudText>
            <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-4">
                Your payment was cancelled. Your items are still in your cart.
            </MudText>

            @if (cancelledOrder is not null)
            {
                <MudAlert Severity="Severity.Info" Variant="Variant.Text" Class="mb-4" Dense="true">
                    Order <strong>@cancelledOrder.OrderNumber</strong> has been marked as cancelled. You can review it on the My Orders page.
                </MudAlert>
            }
            
            <MudStack Row="true" Spacing="3">
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="@Icons.Material.Filled.ShoppingCart"
                          Href="/checkout">
                    Return to Checkout
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Primary" 
                          StartIcon="@Icons.Material.Filled.ShoppingBag"
                          Href="/catalog">
                    Continue Shopping
                </MudButton>
                <MudButton Variant="Variant.Outlined"
                          Color="Color.Info"
                          StartIcon="@Icons.Material.Filled.ReceiptLong"
                          Href="/orders">
                    View My Orders
                </MudButton>
            </MudStack>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "session_id")]
    public string? SessionId { get; set; }

    private Order? cancelledOrder;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(SessionId))
        {
            Snackbar.Add("Payment cancelled.", Severity.Warning, config =>
            {
                config.VisibleStateDuration = 2000;
            });
            return;
        }

        try
        {
            cancelledOrder = await AppService.CancelPaymentAsync(SessionId);

            var message = cancelledOrder?.OrderNumber is not null
                ? $"Payment cancelled. Order #{cancelledOrder.OrderNumber} recorded."
                : "Payment cancelled.";

            Snackbar.Add(message, Severity.Warning, config =>
            {
                config.VisibleStateDuration = 1000;
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to record cancelled payment: {ex.Message}");
            Console.WriteLine($"Exception details: {ex}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");

            Snackbar.Add("Payment cancelled, but we couldn't record the order automatically.", Severity.Warning, config =>
            {
                config.VisibleStateDuration = 2000;
            });
        }
    }
}
