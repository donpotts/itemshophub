@page "/service-categories"
@using ItemShopHub.Shared.Models
@using ItemShopHub.Shared.Blazor.Services
@inject AppService AppService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService

<PageTitle>Manage Service Categories</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudStack Spacing="4">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h4">
                <MudIcon Icon="@Icons.Material.Filled.Category" Class="mr-2" />
                Manage Service Categories
            </MudText>
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      StartIcon="@Icons.Material.Filled.Add"
                      OnClick="NavigateToAdd">
                Add Category
            </MudButton>
        </MudStack>

        <MudPaper Class="pa-4" Elevation="2">
            <MudStack Row="true" Spacing="3" AlignItems="AlignItems.Center" Class="mb-4">
                <MudTextField @bind-Value="searchTerm" 
                            Label="Search categories..." 
                            Variant="Variant.Outlined"
                            Adornment="Adornment.End" 
                            AdornmentIcon="@Icons.Material.Filled.Search"
                            OnKeyUp="OnSearchKeyUp"
                            Class="flex-grow-1" />
                <MudButton Variant="Variant.Outlined" OnClick="LoadCategories">Refresh</MudButton>
            </MudStack>

            @if (isLoading)
            {
                <MudProgressLinear Indeterminate="true" Class="mb-4" />
            }

            @if (categories == null)
            {
                <MudProgressCircular Indeterminate="true" />
            }
            else if (!categories.Any())
            {
                <MudPaper Class="pa-8" Elevation="1">
                    <MudStack AlignItems="AlignItems.Center" Spacing="4">
                        <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Large" Color="Color.Default" />
                        <MudText Typo="Typo.h6">No categories found</MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToAdd">
                            Add Your First Category
                        </MudButton>
                    </MudStack>
                </MudPaper>
            }
            else
            {
                <MudDataGrid Items="@filteredCategories" 
                           Loading="@isLoading"
                           Hover="true" 
                           Breakpoint="Breakpoint.Sm"
                           Height="600px"
                           FixedHeader="true">
                    <Columns>
                        <PropertyColumn Property="x => x.Name" Title="Category Name" />
                        <PropertyColumn Property="x => x.Description" Title="Description" />
                        <PropertyColumn Property="x => x.SortOrder" Title="Sort Order" />
                        <PropertyColumn Property="x => x.IsActive" Title="Active">
                            <CellTemplate>
                                <MudChip Color="@(context.Item.IsActive ? Color.Success : Color.Default)" 
                                        Size="Size.Small">
                                    @(context.Item.IsActive ? "Yes" : "No")
                                </MudChip>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.CreatedDate" Title="Created" Format="yyyy-MM-dd" />
                        <TemplateColumn CellClass="d-flex justify-end" Sortable="false">
                            <CellTemplate>
                                <MudStack Row="true" Spacing="1">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                 Color="Color.Primary" 
                                                 Size="Size.Small"
                                                 OnClick="@(() => NavigateToEdit(context.Item.Id))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                 Color="Color.Error" 
                                                 Size="Size.Small"
                                                 OnClick="@(() => DeleteCategory(context.Item))" />
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            }
        </MudPaper>
    </MudStack>
</MudContainer>

@code {
    private IEnumerable<ServiceCategory>? categories;
    private IEnumerable<ServiceCategory> filteredCategories => categories?.Where(FilterCategory) ?? Enumerable.Empty<ServiceCategory>();
    private string searchTerm = string.Empty;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        isLoading = true;
        try
        {
            categories = await AppService.GetServiceCategoriesAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading categories: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool FilterCategory(ServiceCategory category)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return true;

        var searchLower = searchTerm.ToLowerInvariant();
        return (category.Name?.ToLowerInvariant().Contains(searchLower) ?? false) ||
               (category.Description?.ToLowerInvariant().Contains(searchLower) ?? false);
    }

    private void OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            StateHasChanged();
        }
    }

    private void NavigateToAdd()
    {
        Navigation.NavigateTo("/service-categories/add");
    }

    private void NavigateToEdit(long? categoryId)
    {
        if (categoryId.HasValue)
        {
            Navigation.NavigateTo($"/service-categories/edit/{categoryId}");
        }
    }

    private async Task DeleteCategory(ServiceCategory category)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Delete Service Category",
            $"Are you sure you want to delete '{category.Name}'?",
            yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            try
            {
                await AppService.DeleteServiceCategoryAsync(category.Id ?? 0);
                Snackbar.Add("Category deleted successfully", Severity.Success);
                await LoadCategories();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting category: {ex.Message}", Severity.Error);
            }
        }
    }
}
