@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@using ItemShopHub.Shared.Models

<EditForm Model="@record" OnValidSubmit="@OnSubmit">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.RateReview" Class="mr-2" />
                Add Product Review
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudStack Spacing="4" Style="min-width: 500px;">
                <!-- Product Selection -->
                    <MudAutocomplete T="Product" Value="selectedProduct" ValueChanged="@OnProductSelected"
                                    SearchFunc="@SearchProducts"
                                    ToStringFunc="@(product => product?.GetDisplayName() ?? string.Empty)"
                                    Label="Select Product" Required="true" 
                                    Placeholder="Type to search for a product..."
                                    Clearable="true" Dense="true"
                                    ResetValueOnEmptyText="true"
                                    CoerceText="false"
                                    MinCharacters="1"
                                    MaxItems="20"
                                    DebounceInterval="300">
                        <ItemTemplate Context="product">
                            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                <MudText>@product.GetDisplayName()</MudText>
                                @if (!string.IsNullOrEmpty(product.Description))
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Tertiary">@(product.Description.Length > 50 ? product.Description.Substring(0, 50) + "..." : product.Description)</MudText>
                                }
                            </MudStack>
                        </ItemTemplate>
                        <NoItemsTemplate>
                            <MudText Align="Align.Center" Color="Color.Tertiary">No products found</MudText>
                        </NoItemsTemplate>
                        <ProgressIndicatorTemplate>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2" Class="pa-2">
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                <MudText Typo="Typo.body2">Searching products...</MudText>
                            </MudStack>
                        </ProgressIndicatorTemplate>
                    </MudAutocomplete>

                <!-- Customer Information -->
                <MudTextField @bind-Value="record.CustomerName" For="@(() => record.CustomerName)" 
                             Label="Your Name" Required="true" Placeholder="Enter your full name" />
                
                <MudTextField @bind-Value="record.CustomerEmail" For="@(() => record.CustomerEmail)" 
                             Label="Email Address" Required="true" InputType="InputType.Email" 
                             Placeholder="your.email@example.com" />

                <!-- Star Rating -->
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudText>Rating: <MudText Typo="Typo.caption" Color="Color.Error" Style="display: inline;">*</MudText></MudText>
                    <StarRating Value="ratingValue" ValueChanged="@OnRatingChanged" Size="Size.Medium" ShowRatingText="true" />
                </MudStack>
                
                <MudTextField @bind-Value="record.Title" For="@(() => record.Title)" 
                             Label="Review Title" Placeholder="Summarize your experience" />
                
                <MudTextField @bind-Value="record.ReviewText" For="@(() => record.ReviewText)" 
                             Label="Your Review" Lines="4" Required="true"
                             Placeholder="Share your thoughts about this product..." />

                <MudCheckBox @bind-Value="record.IsVerifiedPurchase" For="@(() => record.IsVerifiedPurchase)" 
                            Label="I am a verified purchaser of this product" Color="Color.Success" />
            </MudStack>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel" Variant="Variant.Text">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" 
                      StartIcon="@Icons.Material.Filled.Save" Disabled="@(!IsFormValid)">Add Review</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    IMudDialogInstance? MudDialog { get; set; }

    private ProductReview record = new();
    private decimal? ratingValue;
    private Product? selectedProduct;

    // Form validation helper
    private bool IsFormValid => 
        selectedProduct != null && 
        !string.IsNullOrWhiteSpace(record.CustomerName) && 
        !string.IsNullOrWhiteSpace(record.CustomerEmail) && 
        !string.IsNullOrWhiteSpace(record.ReviewText) && 
        ratingValue.HasValue;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            // Set default values
            var now = DateTime.Now;
            record.ReviewDate = now;
            record.CreatedDate = now;
            record.ModifiedDate = now;
            record.HelpfulVotes = 0;
            
            // We'll use server-side search, so no need to pre-load all products
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        try
        {
            // Set the rating from the star component
            record.Rating = ratingValue;
            
            // Ensure dates are set
            var now = DateTime.Now;
            record.ReviewDate ??= now;
            record.CreatedDate ??= now;
            record.ModifiedDate = now;
            
            // Set the product ID from the selected product
            record.ProductId = selectedProduct?.Id;
            
            await AppService.InsertProductReviewAsync(record);
            Snackbar.Add("Review added successfully!", Severity.Success);
            MudDialog?.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding review: {ex.Message}", Severity.Error);
        }
    }

    private async Task<IEnumerable<Product>> SearchProducts(string value, CancellationToken token)
    {
        // Check if cancelled
        if (token.IsCancellationRequested)
            return Array.Empty<Product>();

        // If no search term or too short, return empty (MinCharacters=1 handles this)
        if (string.IsNullOrWhiteSpace(value) || value.Length < 1)
            return Array.Empty<Product>();

        try
        {
            // For better performance with large datasets, use OData filtering
            var sanitizedValue = value.ToLower().Replace("'", "''");
            var result = await AppService.ListProductODataAsync(
                filter: $"contains(tolower(Model), '{sanitizedValue}') or contains(tolower(Name), '{sanitizedValue}') or contains(tolower(Description), '{sanitizedValue}')",
                orderby: "Model,Name",
                top: 20
            );

            return result?.Value ?? Array.Empty<Product>();
        }
        catch (Exception)
        {
            // If server search fails, return empty results
            return Array.Empty<Product>();
        }
    }

    private void OnProductSelected(Product? product)
    {
        selectedProduct = product;
        
        // Auto-generate review title when product is selected
        GenerateReviewTitle();
        
        StateHasChanged();
    }

    private void OnRatingChanged(decimal? rating)
    {
        ratingValue = rating;
        
        // Update title when rating changes
        GenerateReviewTitle();
        
        StateHasChanged();
    }

    private void GenerateReviewTitle()
    {
        // Only auto-generate if title is empty and we have a product
        if (selectedProduct != null && string.IsNullOrWhiteSpace(record.Title))
        {
            if (ratingValue.HasValue)
            {
                // Generate title based on rating
                var displayName = selectedProduct.GetDisplayName();
                var title = ratingValue.Value switch
                {
                    >= 4.5m => $"Excellent {displayName}!",
                    >= 4.0m => $"Great {displayName}",
                    >= 3.0m => $"Good {displayName}",
                    >= 2.0m => $"Average {displayName}",
                    _ => $"Disappointing {displayName}"
                };
                record.Title = title;
            }
            else
            {
                // Default title without rating
                record.Title = $"My Review of {selectedProduct.GetDisplayName()}";
            }
        }
    }
}
