@page "/brand"
@inject AppService AppService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject IStorageService StorageService
@attribute [Authorize]
@using CsvHelper
@using System.Globalization
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>Brands</PageTitle>

<div class="mb-3">
    <MudText Typo="Typo.h3">Brands</MudText>
</div>

<MudStack AlignItems="AlignItems.End" Class="mb-3">
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
        <MudToggleIconButton ToggledChanged="OnToggleView" Toggled="_isCardView"
                           Icon="@Icons.Material.Filled.ViewModule" 
                           ToggledIcon="@Icons.Material.Filled.ViewList"
                           Size="Size.Medium" />
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircleOutline" Color="Color.Primary" OnClick="@(e => OnAdd())">Add</MudButton>
    </MudStack>
</MudStack>

@if (_isCardView)
{
    <!-- Card View -->
    <MudStack Class="mb-3">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6">Brands</MudText>
            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true" ValueChanged="@(value => SearchChanged(value))"></MudTextField>
                <MudButton Color="Color.Primary" OnClick="ExportAllToCSV">Export CSV</MudButton>
                <MudFileUpload T="IBrowserFile" Accept=".csv" FilesChanged="ImportFromCSV" MaximumFileCount="1">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Upload">
                            Import CSV
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
                @if (_isImporting)
                {
                    <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
                }
            </MudStack>
        </MudStack>
    </MudStack>
    
    @if (_cardData != null && _cardData.Items.Any())
    {
        <MudGrid>
            @foreach (var brand in _cardData.Items)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Style="height: 350px; display: flex; flex-direction: column;">
                        @if (!string.IsNullOrEmpty(brand.LogoUrl))
                        {
                            <MudCardMedia Image="@brand.LogoUrl" Height="150" Style="object-fit: contain; background: #f5f5f5;" />
                        }
                        <MudCardContent Style="flex: 1; display: flex; flex-direction: column;">
                            <MudText Typo="Typo.h6" Style="margin-bottom: 8px;">@brand.Name</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Style="flex: 1; overflow: hidden; text-overflow: ellipsis;">@brand.Description</MudText>
                            @if (!string.IsNullOrEmpty(brand.Website))
                            {
                                <MudLink Href="@brand.Website" Target="_blank" Typo="Typo.caption" Color="Color.Primary">Visit Website</MudLink>
                            }
                            @if (brand.EstablishedDate.HasValue)
                            {
                                <MudText Typo="Typo.caption" Color="Color.Tertiary" Style="margin-top: 4px;">Est. @brand.EstablishedDate.Value.Year</MudText>
                            }
                        </MudCardContent>
                        <MudCardActions>
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" title="Edit" OnClick="@(e => OnEdit(brand))" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" title="Delete" OnClick="@(e => OnDelete(brand))" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
        
        <!-- Card View Pagination -->
        <MudStack Row="true" Justify="Justify.Center" Class="mt-4">
            <MudPagination Count="@_totalPages" SelectedChanged="OnPageChanged" Selected="_currentPage" ShowFirstButton="true" ShowLastButton="true" />
        </MudStack>
    }
    else
    {
        <MudText Typo="Typo.body1" Align="Align.Center" Class="mt-4">No brands found</MudText>
    }
}
else
{
    <!-- Grid View -->
    <MudDataGrid T="Brand" @ref="grid" ServerData="(new Func<GridState<Brand>, Task<GridData<Brand>>>(ServerReload))" Filterable="true">
    <ToolBarContent>
         <MudText Typo="Typo.h6">Brands</MudText>
         <MudSpacer />
         <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true" ValueChanged="@(value => SearchChanged(value))"></MudTextField>
         <MudButton Color="Color.Primary" OnClick="ExportAllToCSV">Export CSV</MudButton>
         <MudFileUpload T="IBrowserFile" Accept=".csv" FilesChanged="ImportFromCSV" MaximumFileCount="1">
             <ActivatorContent>
                 <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Upload">
                     Import CSV
                 </MudButton>
             </ActivatorContent>
         </MudFileUpload>
         @if (_isImporting)
         {
             <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
         }
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x!.Id" Title="Id" />
        <PropertyColumn Property="x => x!.Name" Title="Name" />
        <PropertyColumn Property="x => x!.Description" Title="Description" />
        <PropertyColumn Property="x => x!.LogoUrl" Title="LogoUrl" />
        <PropertyColumn Property="x => x!.Website" Title="Website" />
        <PropertyColumn Property="x => x!.EstablishedDate" Title="EstablishedDate" />
        <PropertyColumn Property="x => x!.CreatedDate" Title="CreatedDate" />
        <PropertyColumn Property="x => x!.ModifiedDate" Title="ModifiedDate" />
        <PropertyColumn Property="x => x!.Notes" Title="Notes" />
        <PropertyColumn Property="x => x!.UserId" Title="UserId" />
        <TemplateColumn Style="width: 50px;" StickyRight="true" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudStack Row="true">
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" title="Edit" OnClick="@(e => OnEdit(context.Item!))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" title="Delete" OnClick="@(e => OnDelete(context.Item!))" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Brand" />
    </PagerContent>
</MudDataGrid>
}

<script>
    window.downloadFromBase64 = function (base64, filename) {
        var a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        var byteCharacters = atob(base64);
        var byteNumbers = new Array(byteCharacters.length);
        for (var i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        var byteArray = new Uint8Array(byteNumbers);
        var blob = new Blob([byteArray], { type: "application/octet-stream" });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = filename;
        a.click();
        window.URL.revokeObjectURL(url);
    };
</script>

@code {
    private MudDataGrid<Brand>? grid;
    private string? _searchString;
    private bool _isImporting = false;
    private IBrowserFile? _csvFile;
    private bool _isCardView = false;
    private GridData<Brand>? _cardData;
    private int _currentPage = 1;
    private int _pageSize = 12;
    private int _totalPages = 1;
    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    private async Task<GridData<Brand>> ServerReload(GridState<Brand> state)
    {
        var top = state.PageSize;
        var skip = state.Page * state.PageSize;
        var orderby = ODataHelpers.GetOrderBy(state.SortDefinitions);
        var filter = ODataHelpers.GetFilter(state.FilterDefinitions);

        AppService.ODataResult<Brand>? result = null;

        try
        {
            if (_searchString?.Length > 0)
            {
               bool isNumeric = double.TryParse(_searchString, out _);
               bool isDateTime = DateTime.TryParse(_searchString, out _);

               if (isNumeric)
               {
                   filter = $"Id eq {_searchString} or UserId eq {_searchString}";
               }
               else if (isDateTime)
               {
                   filter = $"EstablishedDate ge cast({_searchString},Edm.DateTimeOffset) or CreatedDate ge cast({_searchString},Edm.DateTimeOffset) or ModifiedDate ge cast({_searchString},Edm.DateTimeOffset)";
               }
               else
               {
                   filter = $"contains(tolower(Name), '{_searchString}') or contains(tolower(Description), '{_searchString}') or contains(tolower(LogoUrl), '{_searchString}') or contains(tolower(Website), '{_searchString}') or contains(tolower(Notes), '{_searchString}') ";
               }
            }
            result = await AppService.ListBrandODataAsync(top, skip, orderby, filter, true, null);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return new() { TotalItems = result?.Count ?? 0, Items = result?.Value ?? Enumerable.Empty<Brand>() };
    }

    private async void OnAdd()
    {
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };
        var dialogRef = await DialogService.ShowAsync<AddBrand>("Add Brand", dialogOptions);
        var result = await dialogRef.Result;
        if (result != null && !result.Canceled)
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
    }

    private async void OnEdit(Brand record)
    {
        DialogParameters<UpdateBrand> dialogParams = new() { { x => x.Id, record.Id!.Value } };
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };
        var dialogRef = await DialogService.ShowAsync<UpdateBrand>("Update Brand", dialogParams, dialogOptions);
        var result = await dialogRef.Result;
        if (result != null && !result.Canceled)
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
    }

    private async void OnDelete(Brand record)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to delete this record?",
            "Delete",
            "Cancel");
        if (result.GetValueOrDefault(false))
        {
            try
            {
                await AppService.DeleteBrandAsync(record.Id!.Value);
                await (grid?.ReloadServerData() ?? Task.CompletedTask);
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }
    
    private void SearchChanged(string value)
    {
        if (value.EndsWith('.'))
            return;
        _searchString = value.ToLowerInvariant();
        if (_isCardView)
        {
            _currentPage = 1;
            _ = LoadCardData();
        }
        else
        {
            grid?.ReloadServerData();
        }
    }

    private async Task ImportFromCSV(IBrowserFile file)
    {
        if (file == null) return;

        _csvFile = file;
        _isImporting = true;
        StateHasChanged();

        try
        {
            var fileContent = new byte[_csvFile.Size];
            using (var stream = _csvFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024))
            {
                await stream.ReadAsync(fileContent, 0, (int)_csvFile.Size);
            }

            using var memoryStream = new MemoryStream(fileContent);
            using var reader = new StreamReader(memoryStream);
            using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
            
            csv.Context.Configuration.HeaderValidated = null;
            csv.Context.Configuration.MissingFieldFound = null;

            var brands = new List<Brand>();
            await csv.ReadAsync();
            csv.ReadHeader();
            
            while (await csv.ReadAsync())
            {
                var brand = new Brand
                {
                    Name = GetFieldValue(csv, "name") ?? GetFieldValue(csv, "Name"),
                    Description = GetFieldValue(csv, "description") ?? GetFieldValue(csv, "Description"),
                    LogoUrl = GetFieldValue(csv, "logourl") ?? GetFieldValue(csv, "LogoUrl"),
                    Website = GetFieldValue(csv, "website") ?? GetFieldValue(csv, "Website"),
                    Notes = GetFieldValue(csv, "notes") ?? GetFieldValue(csv, "Notes")
                };
                var userIdStr = GetFieldValue(csv, "userid") ?? GetFieldValue(csv, "UserId");
                if (!string.IsNullOrWhiteSpace(userIdStr) && long.TryParse(userIdStr, out var userId))
                    brand.UserId = userId;
                var establishedStr = GetFieldValue(csv, "establisheddate") ?? GetFieldValue(csv, "EstablishedDate");
                if (!string.IsNullOrWhiteSpace(establishedStr) && DateTime.TryParse(establishedStr, out var establishedDate))
                    brand.EstablishedDate = establishedDate;
                brands.Add(brand);
            }

            if (brands.Any())
            {
                var response = await AppService.BulkUpsertBrandAsync(brands);
                if (response != null)
                {
                    var jsonElement = (JsonElement)response;
                    var success = jsonElement.GetProperty("success").GetBoolean();
                    var processedCount = jsonElement.GetProperty("processedCount").GetInt32();
                    var addedCount = jsonElement.GetProperty("addedCount").GetInt32();
                    var updatedCount = jsonElement.GetProperty("updatedCount").GetInt32();
                    if (success)
                    {
                        Snackbar.Add($"Import successful: {processedCount} processed, {addedCount} added, {updatedCount} updated", Severity.Success);
                        await (grid?.ReloadServerData() ?? Task.CompletedTask);
                    }
                    else
                    {
                        Snackbar.Add("Import failed", Severity.Error);
                    }
                }
            }
            else
            {
                Snackbar.Add("No valid brands found in CSV", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error importing CSV: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isImporting = false;
            StateHasChanged();
        }
    }

    private string? GetFieldValue(CsvReader csv, string fieldName)
    {
        try { return csv.GetField(fieldName); } catch { return null; }
    }

    private async Task ExportAllToCSV()
    {
        try
        {
            var result = await AppService.ListBrandODataAsync(null, null, null, null, true, null);
            if (result?.Value != null)
            {
                var ar = result.Value.ToList().Select(x => new
                {
                    x.Id,
                    x.Name,
                    x.Description,
                    x.LogoUrl,
                    x.Website,
                    x.EstablishedDate,
                    x.CreatedDate,
                    x.ModifiedDate,
                    x.Notes,
                    x.UserId,
                });
                using var memoryStream = new MemoryStream();
                using (var writer = new StreamWriter(memoryStream))
                using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
                {
                    csv.WriteRecords(ar);
                }
                var base64 = Convert.ToBase64String(memoryStream.ToArray());
                await JSRuntime.InvokeVoidAsync("downloadFromBase64", base64, "Brand_"+ DateTime.Now.ToString("yyyyMMddHHmmss") +".csv");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var savedViewPreference = await StorageService.GetAsync<bool?>("brand-view-preference");
        if (savedViewPreference.HasValue)
            _isCardView = savedViewPreference.Value;
        if (_isCardView)
            await LoadCardData();
    }

    private async Task LoadCardData()
    {
        var skip = (_currentPage - 1) * _pageSize;
        var orderby = "CreatedDate desc";
        var filter = string.Empty;
        if (!string.IsNullOrWhiteSpace(_searchString))
        {
           bool isNumeric = double.TryParse(_searchString, out _);
           bool isDateTime = DateTime.TryParse(_searchString, out _);
           if (isNumeric)
               filter = $"Id eq {_searchString} or UserId eq {_searchString}";
           else if (isDateTime)
               filter = $"EstablishedDate ge cast({_searchString},Edm.DateTimeOffset) or CreatedDate ge cast({_searchString},Edm.DateTimeOffset) or ModifiedDate ge cast({_searchString},Edm.DateTimeOffset)";
           else
               filter = $"contains(tolower(Name), '{_searchString}') or contains(tolower(Description), '{_searchString}') or contains(tolower(LogoUrl), '{_searchString}') or contains(tolower(Website), '{_searchString}') or contains(tolower(Notes), '{_searchString}') ";
        }
        try
        {
            var result = await AppService.ListBrandODataAsync(_pageSize, skip, orderby, filter, true, null);
            _cardData = new() { TotalItems = result?.Count ?? 0, Items = result?.Value ?? Enumerable.Empty<Brand>() };
            _totalPages = (int)Math.Ceiling(_cardData.TotalItems / (double)_pageSize);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task OnPageChanged(int page)
    {
        _currentPage = page;
        await LoadCardData();
    }

    private async Task OnToggleView(bool isCardView)
    {
        _isCardView = isCardView;
        await StorageService.SetAsync("brand-view-preference", _isCardView);
        if (_isCardView)
        {
            _currentPage = 1;
            await LoadCardData();
        }
        StateHasChanged();
    }
}
