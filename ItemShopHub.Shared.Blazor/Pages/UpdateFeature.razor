@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@using ItemShopHub.Shared.Models

@if (record == null)
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Update Feature</MudText>
        </TitleContent>
        <DialogContent>
            <MudText>Loading...</MudText>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" Disabled="true">Update</MudButton>
        </DialogActions>
    </MudDialog>
}
else
{
    <EditForm Model="@record" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">Update Feature</MudText>
            </TitleContent>
            <DialogContent>
                <MudNumericField @bind-Value="record.Id" For="@(() => record.Id)" Label="Id" ReadOnly="true" />
                <MudTextField @bind-Value="record.Name" For="@(() => record.Name)" Label="Name" />
                <MudTextField @bind-Value="record.Description" For="@(() => record.Description)" Label="Description" />
                <MudTextField @bind-Value="record.IconUrl" For="@(() => record.IconUrl)" Label="IconUrl" />
                <MudTextField @bind-Value="record.Type" For="@(() => record.Type)" Label="Type" />
                <MudTextField Format="s" InputType="InputType.DateTimeLocal" @bind-Value="record.CreatedDate" For="@(() => record.CreatedDate)" Label="CreatedDate" />
                <MudTextField Format="s" InputType="InputType.DateTimeLocal" @bind-Value="record.ModifiedDate" For="@(() => record.ModifiedDate)" Label="ModifiedDate" />
                <MudTextField @bind-Value="record.Notes" For="@(() => record.Notes)" Label="Notes" />
                <MudNumericField @bind-Value="record.UserId" For="@(() => record.UserId)" Label="UserId" />
                <MudSelect T="long?" Label="Product" MultiSelection="true" @bind-SelectedValues="productValues" MultiSelectionTextFunc="@(x => string.Join(", ", x.Select(s => productArray?.FirstOrDefault(i => i.Id?.ToString() == s)?.GetDisplayName())))" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var product in productArray ?? Enumerable.Empty<Product>())
                    {
                        <MudSelectItem T="long?" Value="@product.Id">@product.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>

            </DialogContent>
            <DialogActions>
                <MudButton OnClick="OnCancel">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Update</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [Parameter]
    public long Id { get; set; }

    [CascadingParameter]
    IMudDialogInstance? MudDialog { get; set; }

    private Product[]? productArray;
    private IEnumerable<long?> productValues = Array.Empty<long?>();
    private Feature? record;

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
            return uri;
        var baseUri = HttpClient.BaseAddress ?? throw new Exception("Unable to determine base address");
        return new Uri(baseUri, uri).ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            productArray = await AppService.ListProductAsync();
            record = await AppService.GetFeatureByIdAsync(Id);
            if (record != null)
                productValues = record.Product.Select(x => x.Id).ToHashSet();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel() => MudDialog?.Cancel();

    private async void OnSubmit()
    {
        if (record == null)
            return;
        try
        {
            record.Product = (productValues ?? Array.Empty<long?>())
                .Where(x => x.HasValue)
                .Select(x => new Product { Id = x })
                .ToList();
            await AppService.UpdateFeatureAsync(Id, record);
            MudDialog?.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 256, int maxHeight = 256)
    {
        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
            return null;
        }
        var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);
        try
        {
            return await AppService.UploadImageAsync(image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        return null;
    }
}
