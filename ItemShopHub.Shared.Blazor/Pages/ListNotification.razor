@page "/notification"
@inject AppService AppService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject IStorageService StorageService
@attribute [Authorize]
@using ItemShopHub.Shared.Models

<PageTitle>Notifications</PageTitle>

<div class="mb-3">
    <MudText Typo="Typo.h3">Notifications</MudText>
</div>

<MudStack AlignItems="AlignItems.End" Class="mb-3">
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
        <MudToggleIconButton ToggledChanged="OnToggleView" Toggled="_isCardView"
                           Icon="@Icons.Material.Filled.ViewModule" 
                           ToggledIcon="@Icons.Material.Filled.ViewList"
                           Size="Size.Medium" />
        <MudButton Variant="Variant.Filled" 
                  StartIcon="@Icons.Material.Filled.DoneAll" 
                  Color="Color.Secondary" 
                  OnClick="MarkAllAsRead">
            Mark All Read
        </MudButton>
        @* Test buttons commented out for production
        <MudButton Variant="Variant.Outlined" 
                  StartIcon="@Icons.Material.Filled.BugReport" 
                  Color="Color.Warning" 
                  OnClick="TestNotifications">
            Test API
        </MudButton>
        <MudButton Variant="Variant.Outlined" 
                  StartIcon="@Icons.Material.Filled.Add" 
                  Color="Color.Info" 
                  OnClick="CreateTestNotifications">
            Create Test Notifications
        </MudButton>
        *@
        <MudButton Variant="Variant.Outlined" 
                  StartIcon="@Icons.Material.Filled.Build" 
                  Color="Color.Error" 
                  OnClick="FixUserIds">
            Fix User IDs
        </MudButton>
    </MudStack>
</MudStack>

@if (_isCardView)
{
    @if (_cardData != null && _cardData.Items.Any())
    {
        <MudGrid>
            @foreach (var notification in _cardData.Items)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Style="height: 280px; display: flex; flex-direction: column;" Class="@(notification.IsRead ? "" : "mud-theme-primary-lighten")">
                        <MudCardContent Style="flex: 1; display: flex; flex-direction: column;">
                            <MudText Typo="Typo.h6" Style="margin-bottom: 8px;">@notification.Title</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Style="flex: 1; overflow: hidden;">@notification.Message</MudText>
                            @if (notification.Type != "Info")
                            {
                                <MudChip T="string" Size="Size.Small" Color="@GetNotificationColor(notification.Type ?? "Info")" Text="@(notification.Type ?? "Info")" />
                            }
                            <MudText Typo="Typo.caption" Color="Color.Tertiary" Style="margin-top: 4px;">@notification.CreatedDate?.ToString("MMM dd, yyyy")</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            @if (!notification.IsRead)
                            {
                                <MudIconButton Icon="@Icons.Material.Outlined.DoneAll" Size="@Size.Small" title="Mark as Read" OnClick="@(e => MarkAsRead(notification))" />
                            }
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" title="Delete" OnClick="@(e => OnDelete(notification))" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
        
        <MudStack Row="true" Justify="Justify.Center" Class="mt-4">
            <MudPagination Count="@_totalPages" SelectedChanged="OnPageChanged" Selected="_currentPage" ShowFirstButton="true" ShowLastButton="true" />
        </MudStack>
    }
    else
    {
        <MudText Typo="Typo.body1" Align="Align.Center" Class="mt-4">No notifications found</MudText>
    }
}
else
{
    <MudDataGrid T="Notification" @ref="grid" ServerData="ServerReload" Filterable="true">
        <ToolBarContent>
             <MudText Typo="Typo.h6">Notifications</MudText>
             <MudSpacer />
             <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true" ValueChanged="SearchChanged"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x!.Id" Title="Id" />
            <PropertyColumn Property="x => x!.Title" Title="Title" />
            <PropertyColumn Property="x => x!.Message" Title="Message" />
            <PropertyColumn Property="x => x!.Type" Title="Type" />
            <PropertyColumn Property="x => x!.UserId" Title="UserId" />
            <PropertyColumn Property="x => x!.IsRead" Title="IsRead" />
            <PropertyColumn Property="x => x!.CreatedDate" Title="CreatedDate" />
            <PropertyColumn Property="x => x!.ReadDate" Title="ReadDate" />
            <PropertyColumn Property="x => x!.ActionUrl" Title="ActionUrl" />
            <TemplateColumn Style="width: 100px;" StickyRight="true" Sortable="false" Filterable="false">
                <CellTemplate>
                    <MudStack Row="true">
                        @if (!context.Item.IsRead)
                        {
                            <MudIconButton Icon="@Icons.Material.Outlined.DoneAll" Size="@Size.Small" title="Mark as Read" OnClick="@(e => MarkAsRead(context.Item!))" />
                        }
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" title="Delete" OnClick="@(e => OnDelete(context.Item!))" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Notification" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private MudDataGrid<Notification>? grid;
    private string? _searchString;
    private bool _isCardView = false;
    private GridData<Notification>? _cardData;
    private int _currentPage = 1;
    private int _pageSize = 12;
    private int _totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        var savedViewPreference = await StorageService.GetAsync<bool?>("notification-view-preference");
        if (savedViewPreference.HasValue)
        {
            _isCardView = savedViewPreference.Value;
        }
        
        if (_isCardView)
        {
            await LoadCardData();
        }
    }

    private async Task<GridData<Notification>> ServerReload(GridState<Notification> state)
    {
        var top = state.PageSize;
        var skip = state.Page * state.PageSize;
        var orderby = ODataHelpers.GetOrderBy(state.SortDefinitions);
        var filter = ODataHelpers.GetFilter(state.FilterDefinitions);

        try
        {
            if (!string.IsNullOrEmpty(_searchString))
            {
                filter = $"contains(tolower(Title), '{_searchString.ToLower()}') or contains(tolower(Message), '{_searchString.ToLower()}')";
            }
            
            var result = await AppService.ListNotificationODataAsync(top, skip, orderby, filter, true);
            return new() { TotalItems = result?.Count ?? 0, Items = result?.Value ?? Enumerable.Empty<Notification>() };
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            return new() { TotalItems = 0, Items = Enumerable.Empty<Notification>() };
        }
    }

    private async Task OnDelete(Notification record)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to delete this notification?",
            "Delete",
            "Cancel");

        if (result.GetValueOrDefault(false))
        {
            try
            {
                await AppService.DeleteNotificationAsync(record.Id!.Value);
                await RefreshData();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }
    
    private void SearchChanged(string value)
    {
        _searchString = value;
        if (_isCardView)
        {
            _currentPage = 1;
            _ = LoadCardData();
        }
        else
        {
            grid?.ReloadServerData();
        }
    }

    private async Task LoadCardData()
    {
        var skip = (_currentPage - 1) * _pageSize;
        var orderby = "CreatedDate desc";
        var filter = "";

        if (!string.IsNullOrEmpty(_searchString))
        {
            filter = $"contains(tolower(Title), '{_searchString.ToLower()}') or contains(tolower(Message), '{_searchString.ToLower()}')";
        }

        try
        {
            var result = await AppService.ListNotificationODataAsync(_pageSize, skip, orderby, filter, true);
            _cardData = new() { TotalItems = result?.Count ?? 0, Items = result?.Value ?? Enumerable.Empty<Notification>() };
            _totalPages = (int)Math.Ceiling((double)_cardData.TotalItems / _pageSize);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task OnPageChanged(int page)
    {
        _currentPage = page;
        await LoadCardData();
    }

    private async Task OnToggleView(bool isCardView)
    {
        _isCardView = isCardView;
        await StorageService.SetAsync("notification-view-preference", _isCardView);
        
        if (_isCardView)
        {
            _currentPage = 1;
            await LoadCardData();
        }
        StateHasChanged();
    }

    private async Task MarkAsRead(Notification notification)
    {
        try
        {
            await AppService.MarkNotificationAsReadAsync(notification.Id!.Value);
            notification.IsRead = true;
            notification.ReadDate = DateTime.UtcNow;
            await RefreshData();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error marking notification as read: {ex.Message}", Severity.Error);
        }
    }

    private async Task MarkAllAsRead()
    {
        try
        {
            await AppService.MarkAllNotificationsAsReadAsync();
            Snackbar.Add("All notifications marked as read", Severity.Success);
            await RefreshData();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error marking all notifications as read: {ex.Message}", Severity.Error);
        }
    }

    private async Task RefreshData()
    {
        if (_isCardView)
        {
            await LoadCardData();
        }
        else
        {
            await grid!.ReloadServerData();
        }
    }

    // Test methods commented out for production
    /*
    private async Task TestNotifications()
    {
        try
        {
            var result = await AppService.TestGetNotificationsAsync();
            Snackbar.Add($"Test API returned {result?.Count ?? 0} notifications", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Test API failed: {ex.Message}", Severity.Error);
        }
    }

    private async Task CreateTestNotifications()
    {
        try
        {
            var result = await AppService.CreateTestNotificationsAsync();
            Snackbar.Add("Test notifications created successfully!", Severity.Success);
            await RefreshData();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to create test notifications: {ex.Message}", Severity.Error);
        }
    }
    */

    private async Task FixUserIds()
    {
        try
        {
            var result = await AppService.FixNotificationUserIdsAsync();
            Snackbar.Add("User IDs fixed successfully! Notifications should now appear.", Severity.Success);
            await RefreshData();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to fix user IDs: {ex.Message}", Severity.Error);
        }
    }

    private static Color GetNotificationColor(string type) => type switch
    {
        "Success" => Color.Success,
        "Warning" => Color.Warning,
        "Error" => Color.Error,
        _ => Color.Info
    };
}
