@page "/service/view/{Id:long}"
@using ItemShopHub.Shared.Models
@using ItemShopHub.Shared.Blazor.Services
@inject AppService AppService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<PageTitle>Service Details</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else if (service == null)
    {
        <MudAlert Severity="Severity.Error">Service not found.</MudAlert>
    }
    else
    {
        <MudStack Spacing="4">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="GoBack" />
                <MudText Typo="Typo.h4">
                    <MudIcon Icon="@Icons.Material.Filled.Visibility" Class="mr-2" />
                    @service.Name
                </MudText>
            </MudStack>

            <MudGrid Spacing="4">
                <MudItem xs="12" md="4">
                    <MudPaper Class="pa-2" Elevation="1">
                        <MudImage Src="@(service.ImageUrl ?? "/images/placeholder-service.png")" Alt="@service.Name" Style="width:100%; height:300px; object-fit:cover; border-radius:4px;" />
                    </MudPaper>
                    <MudStack Spacing="2" Class="mt-2">
                        <MudChip T="string" Color="Color.Primary">@service.PricingType</MudChip>
                        @if (service.IsAvailable)
                        {
                            <MudChip T="string" Color="Color.Success">Available</MudChip>
                        }
                        else
                        {
                            <MudChip T="string" Color="Color.Error">Unavailable</MudChip>
                        }
                        @if (service.RequiresOnsite)
                        {
                            <MudChip T="string" Color="Color.Info">Onsite</MudChip>
                        }
                    </MudStack>
                </MudItem>
                <MudItem xs="12" md="8">
                    <MudPaper Class="pa-4" Elevation="1">
                        <MudStack Spacing="2">
                            <MudText Typo="Typo.h5">Overview</MudText>
                            <MudText Typo="Typo.body1">@service.DetailedDescription</MudText>
                            <MudDivider Class="my-2" />
                            <MudText Typo="Typo.subtitle1">Pricing</MudText>
                            <MudText Typo="Typo.body2">@service.PricingDisplay</MudText>
                            @if (!string.IsNullOrWhiteSpace(service.Requirements))
                            {
                                <MudText Typo="Typo.subtitle1" Class="mt-2">Requirements</MudText>
                                <MudText Typo="Typo.body2">@service.Requirements</MudText>
                            }
                            @if (!string.IsNullOrWhiteSpace(service.Deliverables))
                            {
                                <MudText Typo="Typo.subtitle1" Class="mt-2">Deliverables</MudText>
                                <MudText Typo="Typo.body2">@service.Deliverables</MudText>
                            }
                        </MudStack>
                    </MudPaper>
                </MudItem>
            </MudGrid>

            @if (service.ServiceReview?.Any() == true)
            {
                <MudPaper Class="pa-4" Elevation="1">
                    <MudStack Spacing="2">
                        <MudText Typo="Typo.h6">Reviews (@service.ServiceReview.Count)</MudText>
                        <ServiceRatingDisplay Reviews="service.ServiceReview" ShowBreakdown="true" />
                        <MudDivider Class="my-2" />
                        @foreach (var r in service.ServiceReview.OrderByDescending(r => r.ReviewDate).Take(10))
                        {
                            <MudStack Class="mb-3" Spacing="1">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudRating ReadOnly="true" SelectedValue="@((int)(r.Rating ?? 0))" MaxValue="5" Size="Size.Small" />
                                    <MudText Typo="Typo.subtitle2">@r.Title</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">@r.CustomerName</MudText>
                                    <MudText Typo="Typo.caption">@r.ReviewDate?.ToString("yyyy-MM-dd")</MudText>
                                </MudStack>
                                <MudText Typo="Typo.body2">@r.ReviewText</MudText>
                            </MudStack>
                            <MudDivider />
                        }
                    </MudStack>
                </MudPaper>
            }
        </MudStack>
    }
</MudContainer>

@code {
    [Parameter] public long Id { get; set; }
    private Service? service;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadService();
    }

    private async Task LoadService()
    {
        try
        {
            isLoading = true;
            service = await AppService.GetServiceAsync(Id);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading service: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/services");
    }
}
